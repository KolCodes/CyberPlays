import os
import sys
from tasks import task_a, task_b, task_c
from utils.hashing import load_signatures

# Add the project root directory to sys.path to allow importing from tasks and utils
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.append(project_root)

def main():
    import argparse
    parser = argparse.ArgumentParser(description="Malware Detection Tool")
    parser.add_argument('-d', '--directory', help="Directory to scan")
    parser.add_argument('-s', '--signature', help="Path to signature file")
    parser.add_argument('-o', '--output', help="Output log file")
    parser.add_argument('-r', '--realtime', action='store_true', help="Enable real-time monitoring")
    parser.add_argument('--create-signature-db', action='store_true', help="Generate a new signature database")

    args = parser.parse_args()

    # If --create-signature-db is specified, generate the signature database and exit
    if args.create_signature_db:
        print("Generating signature database...")
        task_a.create_signature_database()  # Use the default file path or specify a custom path if needed
        print("Signature database created successfully.")
        return

    # Check if the directory, signature, and output are provided for scanning or monitoring
    if not (args.directory and args.signature and args.output):
        print("Please specify the directory to scan, the signature file path, and the output log file.")
        return

    # Load signatures if not in signature creation mode
    print("Loading malware signatures...")
    signatures = load_signatures(args.signature)
    print(f"Loaded {len(signatures)} signatures for detection.")

    # Run real-time monitoring or directory scan based on provided options
    if args.realtime:
        print("Starting real-time monitoring...")
        task_c.monitor_directory(args.directory, signatures, args.output)
    else:
        print("Scanning directory...")
        task_b.scan_directory(args.directory, signatures, args.output)
        print("Scan completed.")

if __name__ == "__main__":
    main()
