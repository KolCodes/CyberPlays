import os
import sys

# Add the project root directory to sys.path to allow importing from utils
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(project_root)

from utils.hashing import create_hashes, load_signatures
import random
from datetime import datetime

# Task A1: Create Signature Database
def create_signature_database(file_path="malware_signatures.txt", num_entries=50):
    """
    Creates a file containing malware signatures with MD5 and SHA256 hashes, along with
    metadata including Malware Type, Infection Date, and Severity Level.

    Args:
        file_path (str): Path to save the signature database file.
        num_entries (int): Number of entries to generate for the database.
    """
    print("Creating signature database...")

    # Malware types and severity levels for random generation
    malware_types = ['Worm', 'Ransomware', 'Virus', 'Spyware', 'Adware']
    severity_levels = ['Low', 'Medium', 'High', 'Critical']
    
    # Open the file to write the signature database
    with open(file_path, 'w') as f:
        # Write the header for the signature file
        f.write("MD5 Hash | SHA256 Hash | Malware Type | Infection Date | Severity Level\n")
        f.write("-" * 85 + "\n")  # Divider line for readability

        # Generate each entry with random data
        for _ in range(num_entries):
            # Generate random text for hashing
            text = ''.join(random.choices("abcdefghijklmnopqrstuvwxyz0123456789", k=20))
            
            # Calculate MD5 and SHA256 hashes
            md5_hash, sha256_hash = create_hashes(text)
            
            # Randomly select malware type and severity level
            malware_type = random.choice(malware_types)
            severity = random.choice(severity_levels)
            
            # Use the current date as the infection date
            infection_date = datetime.now().strftime('%Y-%m-%d')

            # Write the entry to the file in the specified format
            f.write(f"{md5_hash} | {sha256_hash} | {malware_type} | {infection_date} | {severity}\n")

    print(f"Signature database created with {num_entries} entries at '{file_path}'.")

# Task A2: Detect Malware
def detect_malware(signatures, text):
    md5, sha256 = create_hashes(text)
    return (md5, sha256) in signatures

# Task A3: Multi-Hash Validation
def multi_hash_validation(text):
    md5, sha1, sha256, sha512 = create_hashes(text, multi=True)
    print(f"MD5: {md5}, SHA1: {sha1}, SHA256: {sha256}, SHA512: {sha512}")

if __name__ == "__main__":
    create_signature_database()